{"version":3,"sources":["../../src/controllers/scratchproject.js"],"names":["ScratchProjectController","constructor","projectid","scratchprojectService","ScratchProjectService","get","req","res","projectId","params","projectJson","getJsonProject","toString","setHeader","status","send","err","message","download","zip","JSZip","file","generateAsync","type","then","content","catch","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,wBAAN,CAA+B;;AAE7BC,gBAAc;AACZ,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,qBAAL,GAA6B,IAAIC,wBAAJ,EAA7B;AACD;;AAED,QAAMC,GAAN,CAAUC,GAAV,EAAeC,GAAf,EAAoB;AAClB,QAAI;AACF,UAAIC,YAAYF,IAAIG,MAAJ,CAAWP,SAA3B;AACA;AACA,YAAMQ,cAAc,MAAM,KAAKP,qBAAL,CAA2BQ,cAA3B,CAA0CH,UAAUI,QAAV,EAA1C,CAA1B;AACAL,UAAIM,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAN,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,WAArB;AACD,KAND,CAME,OAAOM,GAAP,EAAY;AACZT,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,IAAIC,OAAzB;AACD;AACF;;AAED,QAAMC,QAAN,CAAeZ,GAAf,EAAoBC,GAApB,EAAyB;AACvB,QAAI;AACF,UAAIC,YAAYF,IAAIG,MAAJ,CAAWP,SAA3B;AACA,YAAMQ,cAAc,MAAM,KAAKP,qBAAL,CAA2BQ,cAA3B,CAA0CH,UAAUI,QAAV,EAA1C,CAA1B;;AAEA,YAAMO,MAAM,IAAIC,eAAJ,EAAZ;AACAD,UAAIE,IAAJ,CAAS,cAAT,EAAyBX,WAAzB;;AAEAS,UAAIG,aAAJ,CAAkB,EAAEC,MAAM,YAAR,EAAlB,EACCC,IADD,CACMC,WAAW;AACblB,YAAIM,SAAJ,CAAc,cAAd,EAA8B,iBAA9B;AACAN,YAAIQ,IAAJ,CAASU,OAAT;AACH,OAJD,EAIGC,KAJH,CAIUV,GAAD,IAAU;AACfW,gBAAQC,GAAR,CAAY,KAAZ;AACH,OAND;AAQD,KAfD,CAeE,OAAOZ,GAAP,EAAY;AACZT,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,IAAIC,OAAzB;AACD;AACF;;AAEC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5D2B;;kBAgEhBjB,wB","file":"scratchproject.js","sourcesContent":["import ScratchProjectService from '../services/scratchproject';\nimport JSZip from 'jszip';\n\nclass ScratchProjectController {\n\n  constructor() {\n    this.projectid = 1;\n    this.scratchprojectService = new ScratchProjectService();\n  }\n\n  async get(req, res) {\n    try {\n      let projectId = req.params.projectid;\n      // const projectJson = await getJsonProject(projectId.toString()); \n      const projectJson = await this.scratchprojectService.getJsonProject(projectId.toString()); \n      res.setHeader('Content-Type', 'application/json');\n      res.status(200).send(projectJson);\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n  async download(req, res) {\n    try {\n      let projectId = req.params.projectid;\n      const projectJson = await this.scratchprojectService.getJsonProject(projectId.toString()); \n      \n      const zip = new JSZip();\n      zip.file('project.json', projectJson);\n\n      zip.generateAsync({ type: \"nodebuffer\"} )\n      .then(content => { \n          res.setHeader(\"Content-Type\", \"application/zip\");\n          res.send(content);\n      }).catch((err) =>  {\n          console.log('err');\n      })\n      \n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n    // async getById(req, res) {\n    //   const {\n    //     params: { id }\n    //   } = req;\n  \n    //   try {\n    //     const product = await this.Product.find({ _id: id });\n    //     res.send(product);\n    //   } catch (err) {\n    //     res.status(400).send(err.message);\n    //   }\n    // }\n    // async create(req, res) {\n    //   const product = new this.Product(req.body);\n    //   try {\n    //     await product.save();\n    //     res.status(201).send(product);\n    //   } catch (err) {\n    //     res.status(422).send(err.message);\n    //   }\n    // }\n  \n}\n  \nexport default ScratchProjectController;"]}