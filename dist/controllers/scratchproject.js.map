{"version":3,"sources":["../../src/controllers/scratchproject.js"],"names":["ScratchProjectController","projectid","scratchprojectService","ScratchProjectService","req","res","projectId","params","getJsonProject","toString","projectJson","setHeader","status","send","message","zip","JSZip","file","generateAsync","type","then","content","err","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;IAEMA,wB;AAEJ,sCAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,qBAAL,GAA6B,IAAIC,0BAAJ,EAA7B;AACD;;;;;0FAESC,G,EAAKC,G;;;;;;;AAEPC,gBAAAA,S,GAAYF,GAAG,CAACG,MAAJ,CAAWN,S,EAC3B;;;uBAC0B,KAAKC,qBAAL,CAA2BM,cAA3B,CAA0CF,SAAS,CAACG,QAAV,EAA1C,C;;;AAApBC,gBAAAA,W;AACNL,gBAAAA,GAAG,CAACM,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAN,gBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,WAArB;;;;;;;AAEAL,gBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,YAAIC,OAAzB;;;;;;;;;;;;;;;;;;;gGAIWV,G,EAAKC,G;;;;;;;AAEZC,gBAAAA,S,GAAYF,GAAG,CAACG,MAAJ,CAAWN,S;;uBACD,KAAKC,qBAAL,CAA2BM,cAA3B,CAA0CF,SAAS,CAACG,QAAV,EAA1C,C;;;AAApBC,gBAAAA,W;AAEAK,gBAAAA,G,GAAM,IAAIC,iBAAJ,E;AACZD,gBAAAA,GAAG,CAACE,IAAJ,CAAS,cAAT,EAAyBP,WAAzB;AAEAK,gBAAAA,GAAG,CAACG,aAAJ,CAAkB;AAAEC,kBAAAA,IAAI,EAAE;AAAR,iBAAlB,EACCC,IADD,CACM,UAAAC,OAAO,EAAI;AACbhB,kBAAAA,GAAG,CAACM,SAAJ,CAAc,cAAd,EAA8B,iBAA9B;AACAN,kBAAAA,GAAG,CAACQ,IAAJ,CAASQ,OAAT;AACH,iBAJD,WAIS,UAACC,GAAD,EAAU;AACfC,kBAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH,iBAND;;;;;;;AASAnB,gBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,aAAIC,OAAzB;;;;;;;;;;;;;;;QAIF;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;eAIWd,wB","sourcesContent":["import ScratchProjectService from '../services/scratchproject';\nimport JSZip from 'jszip';\n\nclass ScratchProjectController {\n\n  constructor() {\n    this.projectid = 1;\n    this.scratchprojectService = new ScratchProjectService();\n  }\n\n  async get(req, res) {\n    try {\n      let projectId = req.params.projectid;\n      // const projectJson = await getJsonProject(projectId.toString()); \n      const projectJson = await this.scratchprojectService.getJsonProject(projectId.toString()); \n      res.setHeader('Content-Type', 'application/json');\n      res.status(200).send(projectJson);\n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n  async download(req, res) {\n    try {\n      let projectId = req.params.projectid;\n      const projectJson = await this.scratchprojectService.getJsonProject(projectId.toString()); \n      \n      const zip = new JSZip();\n      zip.file('project.json', projectJson);\n\n      zip.generateAsync({ type: \"nodebuffer\"} )\n      .then(content => { \n          res.setHeader(\"Content-Type\", \"application/zip\");\n          res.send(content);\n      }).catch((err) =>  {\n          console.log('err');\n      })\n      \n    } catch (err) {\n      res.status(400).send(err.message);\n    }\n  }\n\n    // async getById(req, res) {\n    //   const {\n    //     params: { id }\n    //   } = req;\n  \n    //   try {\n    //     const product = await this.Product.find({ _id: id });\n    //     res.send(product);\n    //   } catch (err) {\n    //     res.status(400).send(err.message);\n    //   }\n    // }\n    // async create(req, res) {\n    //   const product = new this.Product(req.body);\n    //   try {\n    //     await product.save();\n    //     res.status(201).send(product);\n    //   } catch (err) {\n    //     res.status(422).send(err.message);\n    //   }\n    // }\n  \n}\n  \nexport default ScratchProjectController;"],"file":"scratchproject.js"}